name: Deploy

on:
  pull_request:
    branches: [master]
#TODO: remove
  push:
    branches: [fasit]

jobs:
  run-tests:
    name: Run frontend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'frontend'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # legg til steg her:

  apply-terraform:
    name: Apply Terraform changes
    runs-on: ubuntu-latest
    env:
      TF_VAR_my_name: ${{ github.head_ref }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      ARM_USE_OIDC: 'true'
    outputs:
      swa-api-key: ${{ steps.terraform-output.outputs.swa_api_key }}
    permissions:
      contents: read
      id-token: write
    environment: prod
    defaults:
      run:
        working-directory: 'terraform'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Init Terraform
        run: terraform init

      - name: Set Terraform workspace
        run: terraform workspace new "$TF_VAR_my_name" || terraform workspace select "$TF_VAR_my_name"

      - name: Run Terraform plan
        run: terraform plan

      # Task 3.3
      #
      # # - name: Run Terraform apply
      # Answer 3.3
      - name: Run Terraform apply
        run: terraform apply -auto-approve
      #
      #

      - name: Get output from Terraform
        id: terraform-output
        run: |
          swa_api_key=$(terraform output -raw swa_api_key)
          echo "::add-mask::$swa_api_key"
          echo "swa_api_key=$swa_api_key" >> "$GITHUB_OUTPUT"

      - name: Unlock Terraform state on failure
        if: failure() || cancelled()
        run: |
          lock_id=$(terraform plan -no-color 2> >(grep -i 'ID:' | sed -e 's/ID:\s*//g' | tr -d ' '))
          echo "$lock_id"
          terraform force-unlock -force "$lock_id"

  deploy-frontend:
    name: Deploy frontend
    runs-on: ubuntu-latest
    needs: [run-tests, apply-terraform]
    environment: prod
    defaults:
      run:
        working-directory: 'frontend'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Build and deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ needs.apply-terraform.outputs.swa-api-key }}
          repo_token: ${{ github.token }}
          action: 'upload'
          api_location: ''
          app_location: 'frontend'
          output_location: 'dist'
